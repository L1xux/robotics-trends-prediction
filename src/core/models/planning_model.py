"""
Planning Agent 출력 모델

PlanningOutput: Planning Agent의 최종 출력
CollectionPlan: 데이터 수집 계획
ArxivConfig, TrendsConfig, NewsConfig: 각 데이터 소스별 설정
"""
from pydantic import BaseModel, Field, field_validator
from typing import Any, List, Dict, Optional


class ArxivConfig(BaseModel):
    """arXiv 데이터 수집 설정"""
    
    date_range: str = Field(
        description="검색 날짜 범위 (예: '2022-01-01 to 2025-10-22')",
        min_length=1
    )
    categories: str = Field(
        default="all",
        description="arXiv 카테고리 (all 또는 특정 카테고리)"
    )
    max_results: str = Field(
        default="unlimited",
        description="최대 결과 개수 (unlimited 또는 숫자)"
    )
    
    @field_validator('date_range')
    @classmethod
    def validate_date_range(cls, v: str) -> str:
        if 'to' not in v.lower():
            raise ValueError("date_range must contain 'to' (e.g., '2022-01-01 to 2025-10-22')")
        return v


class TrendsConfig(BaseModel):
    """Google Trends 데이터 수집 설정"""
    
    timeframe: str = Field(
        description="검색 기간 (예: '36 months', 'today 3-m')",
        min_length=1
    )
    
    @field_validator('timeframe')
    @classmethod
    def validate_timeframe(cls, v: str) -> str:
        valid_units = ['months', 'month', 'm', 'days', 'day', 'd', 'years', 'year', 'y']
        if not any(unit in v.lower() for unit in valid_units):
            raise ValueError(f"timeframe must contain time unit: {valid_units}")
        return v


class NewsConfig(BaseModel):
    """뉴스 크롤링 설정"""
    
    sources: int = Field(
        ge=1,
        le=5,
        description="크롤링할 뉴스 소스 개수 (1-5)"
    )
    date_range: str = Field(
        description="검색 날짜 범위 (예: '3 years', '36 months')",
        min_length=1
    )
    
    @field_validator('date_range')
    @classmethod
    def validate_date_range(cls, v: str) -> str:
        valid_units = ['year', 'years', 'month', 'months', 'day', 'days']
        if not any(unit in v.lower() for unit in valid_units):
            raise ValueError(f"date_range must contain time unit: {valid_units}")
        return v


class CollectionPlan(BaseModel):
    """전체 데이터 수집 계획"""
    
    arxiv: ArxivConfig = Field(description="arXiv 수집 설정")
    trends: TrendsConfig = Field(description="Google Trends 수집 설정")
    news: NewsConfig = Field(description="뉴스 크롤링 설정")


class PlanningInput(BaseModel):
    """Planning Tool 입력"""
    topic: str = Field(description="User's research topic")
    feedback: Optional[str] = Field(default=None, description="User feedback for refinement")
    previous_plan: Optional[Dict[str, Any]] = Field(default=None, description="Previous plan to refine")


# ========================================
# Planning Output Model
# ========================================

class PlanningOutput(BaseModel):
    """Planning Agent 출력 모델"""
    
    topic: str = Field(description="Original user topic")
    normalized_topic: str = Field(description="Normalized topic (lowercase with underscores)")
    keywords: List[str] = Field(description="Expanded keywords (5-15)")
    collection_plan: CollectionPlan = Field(description="Data collection plan")
    

    folder_name: Optional[str] = Field(default=None, description="Folder name (generated by Python)")
    reasoning: Optional[str] = Field(default=None, description="Reasoning (optional)")