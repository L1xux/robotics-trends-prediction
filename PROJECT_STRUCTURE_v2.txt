robotics-trends-prediction/
├── config/                          # 애플리케이션 설정
│   ├── __init__.py
│   ├── app_config.yaml              # 앱 설정 파일
│   └── prompts/                     # 프롬프트 템플릿
│       ├── __init__.py
│       ├── analysis_prompts.py      # 분석 프롬프트
│       ├── data_collections_prompts.py  # 데이터 수집 프롬프트
│       └── synthesis_prompts.py     # 합성 프롬프트
│
├── data/                            # 데이터 저장소
│   ├── chroma_db/                   # ChromaDB 벡터 저장소
│   ├── logs/                        # 실행 로그
│   │   ├── error_states/            # 에러 상태 로그
│   │   └── pipeline_logs/           # 파이프라인 실행 로그
│   │       └── ... (기타 로그 파일들)
│   ├── processed/                   # 처리된 데이터
│   ├── raw/                         # 원시 데이터
│   └── reports/                     # 생성된 보고서
│     
│
├── reference_docs/                  # RAG용 참조 문서
│   ├── FTSG.pdf
│   └── WEF.pdf
│
├── src/                             # 소스 코드
│   ├── __init__.py
│   ├── agents/                      # AI 에이전트들
│   │   ├── __init__.py
│   │   ├── base/                    # 기본 에이전트 클래스
│   │   │   ├── __init__.py
│   │   │   ├── agent_config.py      # 에이전트 설정
│   │   │   └── base_agent.py        # 기본 에이전트
│   │   ├── data_collection_agent.py # 데이터 수집 에이전트 (ReAct)
│   │   ├── planning_agent.py        # 계획 수립 에이전트
│   │   └── writer_agent.py          # 보고서 작성 에이전트 (ReAct + HITL)
│   │
│   ├── cli/                         # CLI 컴포넌트
│   │   ├── __init__.py
│   │   └── human_review.py          # 인간 검토 CLI
│   │
│   ├── core/                        # 핵심 컴포넌트
│   │   ├── __init__.py
│   │   ├── settings.py              # 설정 관리
│   │   ├── models/                  # 데이터 모델
│   │   │   ├── __init__.py
│   │   │   ├── citation_model.py   # 인용 모델
│   │   │   ├── data_collection_model.py  # 데이터 수집 모델
│   │   │   ├── planning_model.py   # 계획 모델
│   │   │   ├── quality_check_model.py    # 품질 검사 모델
│   │   │   ├── revision_model.py   # 수정 모델
│   │   │   └── trend_model.py      # 트렌드 모델
│   │   └── patterns/                # 디자인 패턴
│   │       ├── __init__.py
│   │       ├── base_model.py       # 기본 모델
│   │       └── singleton.py        # 싱글톤 패턴
│   │
│   ├── document/                    # 문서 생성
│   │   ├── __init__.py
│   │   ├── docx_generator.py       # DOCX 생성기
│   │   └── pdf_converter.py        # PDF 변환기
│   │
│   ├── graph/                       # LangGraph 워크플로우
│   │   ├── __init__.py
│   │   ├── edges.py                # 그래프 엣지
│   │   ├── nodes.py                # 그래프 노드
│   │   ├── state.py                # 상태 관리
│   │   └── workflow.py             # 워크플로우 정의
│   │
│   ├── llms/                        # LLM 컴포넌트
│   │   ├── __init__.py
│   │   ├── content_analysis_llm.py  # 콘텐츠 분석 LLM
│   │   ├── report_synthesis_llm.py  # 보고서 합성 LLM
│   │   └── revision_llm.py          # 수정 LLM
│   │
│   ├── rag/                         # RAG 파이프라인
│   │   ├── __init__.py
│   │   ├── chunker.py              # 텍스트 청킹
│   │   ├── embedder.py             # 임베딩 생성
│   │   ├── indexer.py              # 인덱싱
│   │   ├── loader.py               # 문서 로더
│   │   └── pipeline.py             # RAG 파이프라인
│   │
│   ├── tools/                       # 데이터 수집 및 처리 도구들
│   │   ├── __init__.py
│   │   ├── base/                   # 기본 도구 클래스
│   │   │   ├── __init__.py
│   │   │   ├── base_tool.py        # 기본 도구
│   │   │   └── tool_config.py      # 도구 설정
│   │   ├── arxiv_tool.py           # ArXiv 논문 수집 도구
│   │   ├── news_crawler_tool.py    # 뉴스 크롤링 도구
│   │   ├── rag_tool.py             # RAG 검색 도구 (BM25 + Cosine + MMR)
│   │   ├── revision_tool.py        # 보고서 수정 도구 (Decision Marker)
│   │   └── recollection_tool.py    # 데이터 재수집 도구 (Decision Marker)
│   │
│   └── utils/                       # 유틸리티 도구들
│       ├── __init__.py
│       ├── data_collect_util.py    # 데이터 수집 유틸리티
│       ├── error_handler.py        # 에러 핸들러
│       ├── feedback_classifier_util.py  # 피드백 분류 유틸리티
│       ├── file_utils.py           # 파일 유틸리티
│       ├── logger.py               # 로깅 유틸리티
│       ├── planning_util.py        # 계획 유틸리티
│       ├── rag_utils.py            # RAG 유틸리티
│       └── refine_plan_util.py     # 계획 개선 유틸리티
│
├── tests/                           # 테스트 코드
│   ├── __init__.py
│   ├── integration/                 # 통합 테스트
│   └── unit/                        # 단위 테스트
│       ├── test_agents/             # 에이전트 테스트
│       ├── test_factories/          # 팩토리 테스트
│       └── test_tools/              # 도구 테스트
│
├── scripts/                         # 실행 스크립트
│   ├── indexer_builder.py          # RAG 인덱스 구축
│   ├── run_pipeline.py             # 메인 실행 스크립트
│   └── validate_setup.py           # 설정 검증
│
├── .env.example                     # 환경 변수 예시
├── ENV_SETUP.md                     # 환경 설정 가이드
├── README.md                        # 프로젝트 설명
└── requirements.txt                 # Python 의존성

## 🆕 v2 주요 변경사항

### 1. **새로운 도구 추가**
- **revision_tool.py**: 보고서 수정을 위한 Decision Marker
- **recollection_tool.py**: 데이터 재수집을 위한 Decision Marker

### 2. **WriterAgent 대폭 개선**
- **ReAct 패턴 적용**: Agent가 자율적으로 도구 선택
- **Human-in-the-Loop 강화**: 사용자 피드백 기반 반복 개선
- **실제 Revision 로직**: LLM을 사용한 보고서 수정 기능
- **향상된 번역 시스템**: 섹션별 번역 + 재시도 메커니즘

### 3. **개선된 워크플로우**
```
1. Planning Agent (Human-in-the-Loop)
   ↓
2. Data Collection Agent (ReAct)
   ↓
3. Content Analysis Agent
   ↓
4. Report Synthesis Agent
   ↓
5. Writer Agent (ReAct + HITL)
   - 보고서 조립
   - 한국어 번역
   - 사용자 검토
   - 피드백 분석
   - 도구 선택 (Revision/Recollection)
   ↓
6. END Node (문서 생성)
```

## 🤖 주요 컴포넌트 설명

### **Agents (에이전트)**
- **PlanningAgent**: 연구 계획 수립 (Human-in-the-Loop)
- **DataCollectionAgent**: 데이터 수집 (ReAct 패턴)
- **WriterAgent**: 보고서 작성 및 번역 (ReAct + Human-in-the-Loop)

### **Tools (도구)**
- **ArXiv Tool**: 학술 논문 수집
- **RAG Tool**: 벡터 검색 (BM25 + Cosine + MMR)
- **News Crawler Tool**: 뉴스 수집
- **Revision Tool**: 보고서 수정 마커
- **Recollection Tool**: 데이터 재수집 마커

### **LLMs (언어 모델)**
- **ContentAnalysisLLM**: 콘텐츠 분석
- **ReportSynthesisLLM**: 보고서 합성
- **RevisionLLM**: 보고서 수정

## 🔄 Human-in-the-Loop 방식

### **1. Planning 단계**
- AI가 초기 계획 생성
- 인간 전문가가 계획 검토 및 수정
- 피드백 기반 계획 개선

### **2. Writing 단계**
- AI가 보고서 작성 및 한국어 번역
- 인간이 보고서 검토
- 피드백에 따른 자동 개선:
  - **Revision**: 표현/문체 개선
  - **Recollection**: 데이터 추가 수집

### **3. ReAct 패턴**
- **Data Collection**: Agent가 자율적으로 도구 선택
- **Writing**: Agent가 피드백 분석 후 적절한 도구 선택

## 📊 데이터 흐름

### **입력**
- 사용자 주제
- 참조 문서 (PDF)
- 실시간 데이터 (ArXiv, 뉴스)

### **처리**
- 계획 수립 → 데이터 수집 → 분석 → 합성 → 작성
- 각 단계별 Human-in-the-Loop 검증

### **출력**
- 한국어 보고서 (DOCX, PDF)
- 상세한 개발 방식 설명 (Appendix)

## 🛠️ 기술 스택

### **AI/ML**
- **LangChain**: Agent 프레임워크
- **LangGraph**: 워크플로우 관리
- **ChromaDB**: 벡터 저장소
- **OpenAI GPT**: 언어 모델

### **데이터 처리**
- **RAG**: 하이브리드 검색 (BM25 + Cosine + MMR)
- **ArXiv API**: 학술 논문 수집
- **뉴스 크롤링**: 실시간 시장 정보

### **문서 생성**
- **python-docx**: DOCX 생성
- **docx2pdf**: PDF 변환
- **Markdown**: 중간 형식

## 🎯 핵심 특징

1. **완전 자동화**: 사용자 주제만 입력하면 완성된 보고서 생성
2. **인간 검증**: 각 단계별 전문가 검토 및 피드백
3. **지속적 개선**: 피드백 기반 반복적 품질 향상
4. **다국어 지원**: 한국어 번역 및 문서 생성
5. **확장 가능**: 새로운 도구와 에이전트 쉽게 추가 가능
